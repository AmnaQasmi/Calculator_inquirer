"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.Effects = void 0;
const chalk_1 = __importDefault(require("chalk"));
const gradient_string_1 = __importDefault(require("gradient-string"));
const Decor_1 = require("./Decor");
class Effects {
    static rainbow(str, frame) {
        const hue = 5 * frame;
        const leftColor = { h: hue % 360, s: 1, v: 1 };
        const rightColor = { h: (hue + 1) % 360, s: 1, v: 1 };
        return (0, gradient_string_1.default)(leftColor, rightColor)(str, this.longHsv);
    }
    static pulse(str, frame) {
        frame = (frame % 120) + 1;
        const transition = 6;
        const duration = 10;
        const on = "#ff1010";
        const off = "#e6e6e6";
        if (frame >= 2 * transition + duration) {
            return chalk_1.default.hex(off)(str); // All white
        }
        if (frame >= transition && frame <= transition + duration) {
            return chalk_1.default.hex(on)(str); // All red
        }
        frame =
            frame >= transition + duration
                ? 2 * transition + duration - frame
                : frame; // Revert animation
        const g = frame <= transition / 2
            ? (0, gradient_string_1.default)([
                { color: off, pos: 0.5 - frame / transition },
                { color: on, pos: 0.5 },
                { color: off, pos: 0.5 + frame / transition },
            ])
            : (0, gradient_string_1.default)([
                { color: off, pos: 0 },
                { color: on, pos: 1 - frame / transition },
                { color: on, pos: frame / transition },
                { color: off, pos: 1 },
            ]);
        return g(str);
    }
    static glitch(str, frame) {
        if ((frame % 2) + (frame % 3) + (frame % 11) + (frame % 29) + (frame % 37) >
            52) {
            return str.replace(/[^\r\n]/g, " ");
        }
        const chunkSize = Math.max(3, Math.round(str.length * 0.02));
        const chunks = [];
        for (let i = 0, length = str.length; i < length; i++) {
            const skip = Math.round(Math.max(0, (Math.random() - 0.8) * chunkSize));
            chunks.push(str.substring(i, i + skip).replace(/[^\r\n]/g, " "));
            i += skip;
            if (str[i]) {
                if (str[i] !== "\n" && str[i] !== "\r" && Math.random() > 0.995) {
                    chunks.push(this.glitchChars[Math.floor(Math.random() * this.glitchChars.length)]);
                }
                else if (Math.random() > 0.005) {
                    chunks.push(str[i]);
                }
            }
        }
        let result = chunks.join("");
        if (Math.random() > 0.99) {
            result = result.toUpperCase();
        }
        else if (Math.random() < 0.01) {
            result = result.toLowerCase();
        }
        return result;
    }
    static radar(str, frame) {
        const depth = Math.floor(Math.min(str.length, str.length * 0.2));
        const step = Math.floor(255 / depth);
        const globalPos = frame % (str.length + depth);
        const chars = [];
        for (let i = 0, length = str.length; i < length; i++) {
            const pos = -(i - globalPos);
            if (pos > 0 && pos <= depth - 1) {
                const shade = (depth - pos) * step;
                chars.push(chalk_1.default.rgb(shade, shade, shade)(str[i]));
            }
            else {
                chars.push(" ");
            }
        }
        return chars.join("");
    }
    static neon(str, frame) {
        const color = frame % 2 === 0
            ? chalk_1.default.dim.rgb(88, 80, 85)
            : chalk_1.default.bold.rgb(213, 70, 242);
        return color(str);
    }
    static karaoke(str, frame) {
        const chars = (frame % (str.length + 20)) - 10;
        if (chars < 0) {
            return chalk_1.default.white(str);
        }
        return (chalk_1.default.rgb(255, 187, 0).bold(str.substr(0, chars)) +
            chalk_1.default.white(str.substr(chars)));
    }
}
Effects.longHsv = { interpolation: "hsv", hsvSpin: "long" };
Effects.glitchChars = "x*0987654321[]0-~@#(____!!!!\\|?????....0000\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t";
__decorate([
    Decor_1.Decor.bound
], Effects, "rainbow", null);
__decorate([
    Decor_1.Decor.bound
], Effects, "pulse", null);
__decorate([
    Decor_1.Decor.bound
], Effects, "glitch", null);
__decorate([
    Decor_1.Decor.bound
], Effects, "radar", null);
__decorate([
    Decor_1.Decor.bound
], Effects, "neon", null);
__decorate([
    Decor_1.Decor.bound
], Effects, "karaoke", null);
exports.Effects = Effects;
