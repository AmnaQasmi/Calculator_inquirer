/**
 * Indexer
 *
 * Storage for the `EventEmitter`'s listeners. The `Indexer`
 * is an extension of the map prototype that provides ordered
 * indexing of callbacks with unique identifier for each index
 */
export declare class Indexer<T extends (...args: any[]) => void | Promise<void>> extends Map<string, T> {
    private IDs;
    /**
     * Register
     *
     * Indexes a callback on the map and returns its unique
     * identifier
     */
    register(callback: T): string;
    /**
     * Execute
     *
     * Iterates each lister on the map and executes it with
     * the provided parameters
     */
    execute(...params: Parameters<T>): void;
    /**
     * Execute Blocking
     *
     * Iterates each lister on the map and executes it. Using
     * this method with cause asynchronous operations to be
     * handled synchronously
     */
    executeBlocking(...params: Parameters<T>): Promise<void>;
}
